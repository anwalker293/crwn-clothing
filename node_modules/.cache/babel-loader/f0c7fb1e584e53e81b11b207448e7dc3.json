{"ast":null,"code":"import { compose, createStore, applyMiddleware } from \"redux\"; // import logger from 'redux-logger';\n\nimport { rootReducer } from \"./root-reducer\";\n\nconst loggerMiddleware = store => next => action => {\n  if (!action.type) {\n    return next(action);\n  }\n\n  console.log(\"type: \", action.type);\n  console.log(\"payload: \", action.payload);\n  console.log(\"currentState: \", store.getState());\n  next(action);\n  console.log(\"next state: \", store.getState());\n};\n\nconst middleWares = [loggerMiddleware];\nconst composedEnhancers = compose(applyMiddleware(...middleWares));\nexport const store = createStore(rootReducer, undefined, composedEnhancers);","map":{"version":3,"sources":["/Users/alex.walker/Zero-to-Mastery/crwn-clothing/src/store/store.js"],"names":["compose","createStore","applyMiddleware","rootReducer","loggerMiddleware","store","next","action","type","console","log","payload","getState","middleWares","composedEnhancers","undefined"],"mappings":"AAAA,SAASA,OAAT,EAAkBC,WAAlB,EAA+BC,eAA/B,QAAsD,OAAtD,C,CACA;;AAEA,SAASC,WAAT,QAA4B,gBAA5B;;AAEA,MAAMC,gBAAgB,GAAIC,KAAD,IAAYC,IAAD,IAAWC,MAAD,IAAY;AACxD,MAAI,CAACA,MAAM,CAACC,IAAZ,EAAkB;AAChB,WAAOF,IAAI,CAACC,MAAD,CAAX;AACD;;AAEDE,EAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBH,MAAM,CAACC,IAA7B;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBH,MAAM,CAACI,OAAhC;AACAF,EAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BL,KAAK,CAACO,QAAN,EAA9B;AAEAN,EAAAA,IAAI,CAACC,MAAD,CAAJ;AAEAE,EAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BL,KAAK,CAACO,QAAN,EAA5B;AACD,CAZD;;AAcA,MAAMC,WAAW,GAAG,CAACT,gBAAD,CAApB;AAEA,MAAMU,iBAAiB,GAAGd,OAAO,CAACE,eAAe,CAAC,GAAGW,WAAJ,CAAhB,CAAjC;AAEA,OAAO,MAAMR,KAAK,GAAGJ,WAAW,CAACE,WAAD,EAAcY,SAAd,EAAyBD,iBAAzB,CAAzB","sourcesContent":["import { compose, createStore, applyMiddleware } from \"redux\";\n// import logger from 'redux-logger';\n\nimport { rootReducer } from \"./root-reducer\";\n\nconst loggerMiddleware = (store) => (next) => (action) => {\n  if (!action.type) {\n    return next(action);\n  }\n\n  console.log(\"type: \", action.type);\n  console.log(\"payload: \", action.payload);\n  console.log(\"currentState: \", store.getState());\n\n  next(action);\n\n  console.log(\"next state: \", store.getState());\n};\n\nconst middleWares = [loggerMiddleware];\n\nconst composedEnhancers = compose(applyMiddleware(...middleWares));\n\nexport const store = createStore(rootReducer, undefined, composedEnhancers);\n"]},"metadata":{},"sourceType":"module"}