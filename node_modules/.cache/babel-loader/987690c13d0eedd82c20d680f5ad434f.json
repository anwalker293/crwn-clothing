{"ast":null,"code":"var _jsxFileName = \"/Users/alex.walker/Zero-to-Mastery/crwn-clothing/src/contexts/cart.context.jsx\",\n    _s = $RefreshSig$();\n\nimport { createContext, useState, useEffect, useReducer } from \"react\";\nimport createAction from \"../utils/reducer/reducer.utils\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst addCartItem = (cartItems, productToAdd) => {\n  // find if cartItems contains productToAdd\n  const existingCartItem = cartItems.find(cartItem => cartItem.id === productToAdd.id); // if found, increment quantity\n\n  if (existingCartItem) {\n    return cartItems.map(cartItem => cartItem.id === productToAdd.id ? { ...cartItem,\n      quantity: cartItem.quantity + 1\n    } : cartItem);\n  } // return new array with modified cartItems/new cart item\n\n\n  return [...cartItems, { ...productToAdd,\n    quantity: 1\n  }];\n};\n\nconst removeCartItem = (cartItems, cartItemToRemove) => {\n  // find the cart item to remove\n  const existingCartItem = cartItems.find(cartItem => cartItem.id === cartItemToRemove.id); // check if item quantity=1, remove item from cart\n\n  if (existingCartItem.quantity == 1) {\n    return cartItems.filter(cartItem => cartItem.id != cartItemToRemove.id);\n  } // return back cart items with matching cart item with reduced quantity\n\n\n  return cartItems.map(cartItem => cartItem.id === cartItemToRemove.id ? { ...cartItem,\n    quantity: cartItem.quantity - 1\n  } : cartItem);\n};\n\nconst clearCartItem = (cartItems, cartItemToClear) => cartItems.filter(cartItem => cartItem.id != cartItemToClear.id);\n\nexport const CartContext = /*#__PURE__*/createContext({\n  isCartOpen: false,\n  setIsCartOpen: () => {},\n  cartItems: [],\n  addItemToCart: () => {},\n  removeItemFromCart: () => {},\n  clearItemFromCart: () => {},\n  cartCount: 0,\n  cartTotal: 0\n});\nconst CART_ACTION_TYPES = {\n  SET_CART_ITEMS: \"SET_CART_ITEMS\",\n  SET_IS_CART_OPEN: \"SET_IS_CART_OPEN\"\n};\nconst INITIAL_STATE = {\n  isCartOpen: false,\n  cartItems: [],\n  cartCount: 0,\n  cartTotal: 0\n};\n\nconst cartReducer = (state, action) => {\n  const {\n    type,\n    payload\n  } = action;\n\n  switch (type) {\n    case CART_ACTION_TYPES.SET_CART_ITEMS:\n      return { ...state,\n        ...payload\n      };\n\n    case CART_ACTION_TYPES.SET_IS_CART_OPEN:\n      return { ...state,\n        isCartOpen: payload\n      };\n\n    default:\n      throw new Error(`Unhandled type of ${type} in cartReducer`);\n  }\n};\n\nexport const CartProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  //const [isCartOpen, setIsCartOpen] = useState(false);\n  //const [cartItems, setCartItems] = useState([]);\n  //const [cartCount, setCartCount] = useState(0);\n  //const [cartTotal, setCartTotal] = useState(0);\n  const [{\n    cartItems,\n    isCartOpen,\n    cartCount,\n    cartTotal\n  }, dispatch] = useReducer(cartReducer, INITIAL_STATE); //useEffect(() => {\n  //  const newCartCount = cartItems.reduce(\n  //    (total, cartItem) => total + cartItem.quantity,\n  //    0\n  //  );\n  //  setCartCount(newCartCount);\n  //}, [cartItems]);\n  //useEffect(() => {\n  //  const newCartTotal = cartItems.reduce(\n  //    (total, cartItem) => total + cartItem.quantity * cartItem.price,\n  //    0\n  //  );\n  //  setCartTotal(newCartTotal);\n  //}, [cartItems]);\n\n  const updateCartItemsReducer = newCartItems => {\n    // generate newCartCount\n    const newCartCount = newCartItems.reduce((total, cartItem) => total + cartItem.quantity, 0); // generate newCartTotal\n\n    const newCartTotal = newCartItems.reduce((total, cartItem) => total + cartItem.quantity * cartItem.price, 0);\n    dispatch({\n      type: CART_ACTION_TYPES.SET_CART_ITEMS,\n      payload: {\n        cartItems: newCartItems,\n        cartTotal: newCartTotal,\n        cartCount: newCartCount\n      }\n    });\n  };\n\n  const addItemToCart = productToAdd => {\n    const newCartItems = addCartItem(cartItems, productToAdd);\n    updateCartItemsReducer(newCartItems);\n  };\n\n  const removeItemFromCart = cartItemToRemove => {\n    const newCartItems = removeCartItem(cartItems, cartItemToRemove);\n    updateCartItemsReducer(newCartItems);\n  };\n\n  const clearItemFromCart = cartItemToRemove => {\n    const newCartItems = clearCartItem(cartItems, cartItemToRemove);\n    updateCartItemsReducer(newCartItems);\n  };\n\n  const setIsCartOpen = bool => {\n    dispatch({\n      type: CART_ACTION_TYPES.SET_IS_CART_OPEN,\n      payload: bool\n    });\n  };\n\n  const value = {\n    isCartOpen,\n    setIsCartOpen,\n    addItemToCart,\n    removeItemFromCart,\n    clearItemFromCart,\n    cartItems,\n    cartCount,\n    cartTotal\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 163,\n    columnNumber: 10\n  }, this);\n};\n\n_s(CartProvider, \"3paH1pqC9GUp4D7OqFgw8GuVIi0=\");\n\n_c = CartProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"sources":["/Users/alex.walker/Zero-to-Mastery/crwn-clothing/src/contexts/cart.context.jsx"],"names":["createContext","useState","useEffect","useReducer","createAction","addCartItem","cartItems","productToAdd","existingCartItem","find","cartItem","id","map","quantity","removeCartItem","cartItemToRemove","filter","clearCartItem","cartItemToClear","CartContext","isCartOpen","setIsCartOpen","addItemToCart","removeItemFromCart","clearItemFromCart","cartCount","cartTotal","CART_ACTION_TYPES","SET_CART_ITEMS","SET_IS_CART_OPEN","INITIAL_STATE","cartReducer","state","action","type","payload","Error","CartProvider","children","dispatch","updateCartItemsReducer","newCartItems","newCartCount","reduce","total","newCartTotal","price","bool","value"],"mappings":"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","sourcesContent":["import { createContext, useState, useEffect, useReducer } from \"react\";\n\nimport createAction from \"../utils/reducer/reducer.utils\";\n\nconst addCartItem = (cartItems, productToAdd) => {\n  // find if cartItems contains productToAdd\n  const existingCartItem = cartItems.find(\n    (cartItem) => cartItem.id === productToAdd.id\n  );\n  // if found, increment quantity\n  if (existingCartItem) {\n    return cartItems.map((cartItem) =>\n      cartItem.id === productToAdd.id\n        ? { ...cartItem, quantity: cartItem.quantity + 1 }\n        : cartItem\n    );\n  }\n  // return new array with modified cartItems/new cart item\n  return [...cartItems, { ...productToAdd, quantity: 1 }];\n};\n\nconst removeCartItem = (cartItems, cartItemToRemove) => {\n  // find the cart item to remove\n  const existingCartItem = cartItems.find(\n    (cartItem) => cartItem.id === cartItemToRemove.id\n  );\n\n  // check if item quantity=1, remove item from cart\n  if (existingCartItem.quantity == 1) {\n    return cartItems.filter((cartItem) => cartItem.id != cartItemToRemove.id);\n  }\n\n  // return back cart items with matching cart item with reduced quantity\n  return cartItems.map((cartItem) =>\n    cartItem.id === cartItemToRemove.id\n      ? { ...cartItem, quantity: cartItem.quantity - 1 }\n      : cartItem\n  );\n};\n\nconst clearCartItem = (cartItems, cartItemToClear) =>\n  cartItems.filter((cartItem) => cartItem.id != cartItemToClear.id);\n\nexport const CartContext = createContext({\n  isCartOpen: false,\n  setIsCartOpen: () => {},\n  cartItems: [],\n  addItemToCart: () => {},\n  removeItemFromCart: () => {},\n  clearItemFromCart: () => {},\n  cartCount: 0,\n  cartTotal: 0,\n});\n\nconst CART_ACTION_TYPES = {\n  SET_CART_ITEMS: \"SET_CART_ITEMS\",\n  SET_IS_CART_OPEN: \"SET_IS_CART_OPEN\",\n};\n\nconst INITIAL_STATE = {\n  isCartOpen: false,\n  cartItems: [],\n  cartCount: 0,\n  cartTotal: 0,\n};\n\nconst cartReducer = (state, action) => {\n  const { type, payload } = action;\n\n  switch (type) {\n    case CART_ACTION_TYPES.SET_CART_ITEMS:\n      return {\n        ...state,\n        ...payload,\n      };\n    case CART_ACTION_TYPES.SET_IS_CART_OPEN:\n      return {\n        ...state,\n        isCartOpen: payload,\n      };\n    default:\n      throw new Error(`Unhandled type of ${type} in cartReducer`);\n  }\n};\n\nexport const CartProvider = ({ children }) => {\n  //const [isCartOpen, setIsCartOpen] = useState(false);\n  //const [cartItems, setCartItems] = useState([]);\n  //const [cartCount, setCartCount] = useState(0);\n  //const [cartTotal, setCartTotal] = useState(0);\n\n  const [{ cartItems, isCartOpen, cartCount, cartTotal }, dispatch] =\n    useReducer(cartReducer, INITIAL_STATE);\n\n  //useEffect(() => {\n  //  const newCartCount = cartItems.reduce(\n  //    (total, cartItem) => total + cartItem.quantity,\n  //    0\n  //  );\n  //  setCartCount(newCartCount);\n  //}, [cartItems]);\n\n  //useEffect(() => {\n  //  const newCartTotal = cartItems.reduce(\n  //    (total, cartItem) => total + cartItem.quantity * cartItem.price,\n  //    0\n  //  );\n  //  setCartTotal(newCartTotal);\n  //}, [cartItems]);\n\n  const updateCartItemsReducer = (newCartItems) => {\n    // generate newCartCount\n    const newCartCount = newCartItems.reduce(\n      (total, cartItem) => total + cartItem.quantity,\n      0\n    );\n\n    // generate newCartTotal\n    const newCartTotal = newCartItems.reduce(\n      (total, cartItem) => total + cartItem.quantity * cartItem.price,\n      0\n    );\n\n    dispatch({\n      type: CART_ACTION_TYPES.SET_CART_ITEMS,\n      payload: {\n        cartItems: newCartItems,\n        cartTotal: newCartTotal,\n        cartCount: newCartCount,\n      },\n    });\n  };\n\n  const addItemToCart = (productToAdd) => {\n    const newCartItems = addCartItem(cartItems, productToAdd);\n    updateCartItemsReducer(newCartItems);\n  };\n\n  const removeItemFromCart = (cartItemToRemove) => {\n    const newCartItems = removeCartItem(cartItems, cartItemToRemove);\n    updateCartItemsReducer(newCartItems);\n  };\n\n  const clearItemFromCart = (cartItemToRemove) => {\n    const newCartItems = clearCartItem(cartItems, cartItemToRemove);\n    updateCartItemsReducer(newCartItems);\n  };\n\n  const setIsCartOpen = (bool) => {\n    dispatch({ type: CART_ACTION_TYPES.SET_IS_CART_OPEN, payload: bool });\n  };\n\n  const value = {\n    isCartOpen,\n    setIsCartOpen,\n    addItemToCart,\n    removeItemFromCart,\n    clearItemFromCart,\n    cartItems,\n    cartCount,\n    cartTotal,\n  };\n  return <CartContext.Provider value={value}>{children}</CartContext.Provider>;\n};\n"]},"metadata":{},"sourceType":"module"}