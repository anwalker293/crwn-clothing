{"ast":null,"code":"import { initializeApp } from \"firebase/app\";\nimport { getAuth, signInWithRedirect, signInWithPopup, GoogleAuthProvider, createUserWithEmailAndPassword, signInWithEmailAndPassword, signOut, onAuthStateChanged } from \"firebase/auth\";\nimport { getFirestore, doc, getDoc, setDoc, collection, writeBatch, query, getDocs } from \"firebase/firestore\";\nconst firebaseConfig = {\n  apiKey: \"AIzaSyD-BLKf4JXmq8exxgmBhBLWtdsPfq8QNFQ\",\n  authDomain: \"crwn-clothing-db-df2c0.firebaseapp.com\",\n  projectId: \"crwn-clothing-db-df2c0\",\n  storageBucket: \"crwn-clothing-db-df2c0.appspot.com\",\n  messagingSenderId: \"896912007160\",\n  appId: \"1:896912007160:web:3467a0ab64793c42e6800d\",\n  measurementId: \"G-8BCPV4JRMK\"\n};\nconst firebaseApp = initializeApp(firebaseConfig);\nconst googleProvider = new GoogleAuthProvider();\ngoogleProvider.setCustomParameters({\n  prompt: \"select_account\"\n});\nexport const auth = getAuth();\nexport const signInWithGooglePopup = () => signInWithPopup(auth, googleProvider);\nexport const signInWithGoogleRedirect = () => signInWithRedirect(auth, googleProvider);\nexport const db = getFirestore();\nexport const addCollectionAndDocuments = async (collectionKey, objectsToAdd) => {\n  const collectionRef = collection(db, collectionKey);\n  const batch = writeBatch(db);\n  objectsToAdd.forEach(object => {\n    const docRef = doc(collectionRef, object.title.toLowerCase());\n    batch.set(docRef, object);\n  });\n  await batch.commit();\n  console.log(\"done\");\n};\nexport const getCategoriesAndDocuments = async () => {\n  const collectionRef = collection(db, \"categories\");\n  const q = query(collectionRef);\n  const querySnapshot = await getDocs(q);\n  const categoryMap = querySnapshot.docs.reduce((acc, docSnapshot) => {\n    const {\n      title,\n      items\n    } = docSnapshot.data();\n    acc[title.toLowerCase()] = items;\n    return acc;\n  }, {});\n  return categoryMap;\n};\nexport const createUserDocumentFromAuth = async function (userAuth) {\n  let additionalInformation = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  if (!userAuth) return;\n  const userDocRef = doc(db, \"users\", userAuth.uid);\n  const userSnapshot = await getDoc(userDocRef);\n\n  if (!userSnapshot.exists()) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await setDoc(userDocRef, {\n        displayName,\n        email,\n        createdAt,\n        ...additionalInformation\n      });\n    } catch (error) {\n      console.log(\"error creating the user\", error.message);\n    }\n  }\n\n  return userDocRef;\n};\nexport const createAuthUserWithEmailAndPassword = async (email, password) => {\n  if (!email || !password) return;\n  return await createUserWithEmailAndPassword(auth, email, password);\n};\nexport const signInAuthUserWithEmailAndPassword = async (email, password) => {\n  if (!email || !password) return;\n  return await signInWithEmailAndPassword(auth, email, password);\n};\nexport const signOutUser = async () => await signOut(auth);\nexport const onAuthStateChangedListener = callback => onAuthStateChanged(auth, callback);","map":{"version":3,"sources":["/Users/alex.walker/Zero-to-Mastery/React-Course/crown-clothing/src/utils/firebase/firebase.utils.js"],"names":["initializeApp","getAuth","signInWithRedirect","signInWithPopup","GoogleAuthProvider","createUserWithEmailAndPassword","signInWithEmailAndPassword","signOut","onAuthStateChanged","getFirestore","doc","getDoc","setDoc","collection","writeBatch","query","getDocs","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","firebaseApp","googleProvider","setCustomParameters","prompt","auth","signInWithGooglePopup","signInWithGoogleRedirect","db","addCollectionAndDocuments","collectionKey","objectsToAdd","collectionRef","batch","forEach","object","docRef","title","toLowerCase","set","commit","console","log","getCategoriesAndDocuments","q","querySnapshot","categoryMap","docs","reduce","acc","docSnapshot","items","data","createUserDocumentFromAuth","userAuth","additionalInformation","userDocRef","uid","userSnapshot","exists","displayName","email","createdAt","Date","error","message","createAuthUserWithEmailAndPassword","password","signInAuthUserWithEmailAndPassword","signOutUser","onAuthStateChangedListener","callback"],"mappings":"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","sourcesContent":["import { initializeApp } from \"firebase/app\";\nimport {\n  getAuth,\n  signInWithRedirect,\n  signInWithPopup,\n  GoogleAuthProvider,\n  createUserWithEmailAndPassword,\n  signInWithEmailAndPassword,\n  signOut,\n  onAuthStateChanged,\n} from \"firebase/auth\";\nimport {\n  getFirestore,\n  doc,\n  getDoc,\n  setDoc,\n  collection,\n  writeBatch,\n  query,\n  getDocs,\n} from \"firebase/firestore\";\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyD-BLKf4JXmq8exxgmBhBLWtdsPfq8QNFQ\",\n  authDomain: \"crwn-clothing-db-df2c0.firebaseapp.com\",\n  projectId: \"crwn-clothing-db-df2c0\",\n  storageBucket: \"crwn-clothing-db-df2c0.appspot.com\",\n  messagingSenderId: \"896912007160\",\n  appId: \"1:896912007160:web:3467a0ab64793c42e6800d\",\n  measurementId: \"G-8BCPV4JRMK\",\n};\n\nconst firebaseApp = initializeApp(firebaseConfig);\n\nconst googleProvider = new GoogleAuthProvider();\n\ngoogleProvider.setCustomParameters({\n  prompt: \"select_account\",\n});\n\nexport const auth = getAuth();\nexport const signInWithGooglePopup = () =>\n  signInWithPopup(auth, googleProvider);\nexport const signInWithGoogleRedirect = () =>\n  signInWithRedirect(auth, googleProvider);\n\nexport const db = getFirestore();\n\nexport const addCollectionAndDocuments = async (\n  collectionKey,\n  objectsToAdd\n) => {\n  const collectionRef = collection(db, collectionKey);\n  const batch = writeBatch(db);\n\n  objectsToAdd.forEach((object) => {\n    const docRef = doc(collectionRef, object.title.toLowerCase());\n    batch.set(docRef, object);\n  });\n\n  await batch.commit();\n  console.log(\"done\");\n};\n\nexport const getCategoriesAndDocuments = async () => {\n  const collectionRef = collection(db, \"categories\");\n  const q = query(collectionRef);\n\n  const querySnapshot = await getDocs(q);\n  const categoryMap = querySnapshot.docs.reduce((acc, docSnapshot) => {\n    const { title, items } = docSnapshot.data();\n    acc[title.toLowerCase()] = items;\n    return acc;\n  }, {});\n\n  return categoryMap;\n};\n\nexport const createUserDocumentFromAuth = async (\n  userAuth,\n  additionalInformation = {}\n) => {\n  if (!userAuth) return;\n\n  const userDocRef = doc(db, \"users\", userAuth.uid);\n\n  const userSnapshot = await getDoc(userDocRef);\n\n  if (!userSnapshot.exists()) {\n    const { displayName, email } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await setDoc(userDocRef, {\n        displayName,\n        email,\n        createdAt,\n        ...additionalInformation,\n      });\n    } catch (error) {\n      console.log(\"error creating the user\", error.message);\n    }\n  }\n\n  return userDocRef;\n};\n\nexport const createAuthUserWithEmailAndPassword = async (email, password) => {\n  if (!email || !password) return;\n\n  return await createUserWithEmailAndPassword(auth, email, password);\n};\n\nexport const signInAuthUserWithEmailAndPassword = async (email, password) => {\n  if (!email || !password) return;\n\n  return await signInWithEmailAndPassword(auth, email, password);\n};\n\nexport const signOutUser = async () => await signOut(auth);\n\nexport const onAuthStateChangedListener = (callback) =>\n  onAuthStateChanged(auth, callback);\n"]},"metadata":{},"sourceType":"module"}