{"ast":null,"code":"import { initializeApp } from \"firebase/app\";\nimport { getAuth, signInWithRedirect, signInWithPopup, GoogleAuthProvider, createUserWithEmailAndPassword, signInWithEmailAndPassword, signOut } from \"firebase/auth\";\nimport { getFirestore, doc, getDoc, setDoc } from \"firebase/firestore\";\nconst firebaseConfig = {\n  apiKey: \"AIzaSyD-BLKf4JXmq8exxgmBhBLWtdsPfq8QNFQ\",\n  authDomain: \"crwn-clothing-db-df2c0.firebaseapp.com\",\n  projectId: \"crwn-clothing-db-df2c0\",\n  storageBucket: \"crwn-clothing-db-df2c0.appspot.com\",\n  messagingSenderId: \"896912007160\",\n  appId: \"1:896912007160:web:3467a0ab64793c42e6800d\",\n  measurementId: \"G-8BCPV4JRMK\"\n};\n\n// Initialize Firebase\nconst firebaseApp = initializeApp(firebaseConfig);\nconst provider = new GoogleAuthProvider();\nprovider.setCustomParameters({\n  prompt: \"select_account\"\n});\nexport const auth = getAuth();\nexport const signInWithGooglePopup = () => signInWithPopup(auth, provider);\nexport const signInWithGoogleRedirect = () => signInWithRedirect(auth, provider);\nexport const db = getFirestore();\nexport const createUserDocumentFromAuth = async function (userAuth) {\n  let additionalInfo = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n    displayName: \"basic\"\n  };\n  if (!userAuth) return;\n  // See if existing document reference\n  const userDocRef = doc(db, \"users\", userAuth.uid);\n  console.log(userDocRef);\n  const userSnapshot = await getDoc(userDocRef);\n\n  // Check if user data exists\n  // if user data exists\n  // return userDocRef\n  // if user data does not exist\n  //\n  // create/set doc with data from userAuth in collection\n  if (!userSnapshot.exists()) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n    try {\n      await setDoc(userDocRef, {\n        displayName,\n        email,\n        createdAt,\n        ...additionalInfo\n      });\n    } catch (error) {\n      console.log(\"Error creating the user.\");\n    }\n  }\n  return userDocRef;\n};\nexport const createAuthUserWithEmailAndPassword = async (email, password) => {\n  if (!email || !password) {\n    return;\n  }\n  return await createUserWithEmailAndPassword(auth, email, password);\n};\nexport const signInAuthUserWithEmailAndPassword = async (email, password) => {\n  if (!email || !password) return;\n  signInWithEmailAndPassword(auth, email, password);\n};\nexport const signOutUser = async () => await signOut(auth);","map":{"version":3,"names":["initializeApp","getAuth","signInWithRedirect","signInWithPopup","GoogleAuthProvider","createUserWithEmailAndPassword","signInWithEmailAndPassword","signOut","getFirestore","doc","getDoc","setDoc","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","firebaseApp","provider","setCustomParameters","prompt","auth","signInWithGooglePopup","signInWithGoogleRedirect","db","createUserDocumentFromAuth","userAuth","additionalInfo","displayName","userDocRef","uid","console","log","userSnapshot","exists","email","createdAt","Date","error","createAuthUserWithEmailAndPassword","password","signInAuthUserWithEmailAndPassword","signOutUser"],"sources":["/Users/alex.walker/Zero-to-Mastery/React-Course/crown-clothing/src/utils/firebase/firebase.utils.js"],"sourcesContent":["import { initializeApp } from \"firebase/app\";\nimport {\n  getAuth,\n  signInWithRedirect,\n  signInWithPopup,\n  GoogleAuthProvider,\n  createUserWithEmailAndPassword,\n  signInWithEmailAndPassword,\n  signOut,\n} from \"firebase/auth\";\nimport { getFirestore, doc, getDoc, setDoc } from \"firebase/firestore\";\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyD-BLKf4JXmq8exxgmBhBLWtdsPfq8QNFQ\",\n  authDomain: \"crwn-clothing-db-df2c0.firebaseapp.com\",\n  projectId: \"crwn-clothing-db-df2c0\",\n  storageBucket: \"crwn-clothing-db-df2c0.appspot.com\",\n  messagingSenderId: \"896912007160\",\n  appId: \"1:896912007160:web:3467a0ab64793c42e6800d\",\n  measurementId: \"G-8BCPV4JRMK\",\n};\n\n// Initialize Firebase\nconst firebaseApp = initializeApp(firebaseConfig);\n\nconst provider = new GoogleAuthProvider();\nprovider.setCustomParameters({\n  prompt: \"select_account\",\n});\n\nexport const auth = getAuth();\nexport const signInWithGooglePopup = () => signInWithPopup(auth, provider);\nexport const signInWithGoogleRedirect = () =>\n  signInWithRedirect(auth, provider);\n\nexport const db = getFirestore();\n\nexport const createUserDocumentFromAuth = async (\n  userAuth,\n  additionalInfo = { displayName: \"basic\" }\n) => {\n  if (!userAuth) return;\n  // See if existing document reference\n  const userDocRef = doc(db, \"users\", userAuth.uid);\n\n  console.log(userDocRef);\n\n  const userSnapshot = await getDoc(userDocRef);\n\n  // Check if user data exists\n  // if user data exists\n  // return userDocRef\n  // if user data does not exist\n  //\n  // create/set doc with data from userAuth in collection\n  if (!userSnapshot.exists()) {\n    const { displayName, email } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await setDoc(userDocRef, {\n        displayName,\n        email,\n        createdAt,\n        ...additionalInfo,\n      });\n    } catch (error) {\n      console.log(\"Error creating the user.\");\n    }\n  }\n\n  return userDocRef;\n};\n\nexport const createAuthUserWithEmailAndPassword = async (email, password) => {\n  if (!email || !password) {\n    return;\n  }\n  return await createUserWithEmailAndPassword(auth, email, password);\n};\n\nexport const signInAuthUserWithEmailAndPassword = async (email, password) => {\n  if (!email || !password) return;\n  signInWithEmailAndPassword(auth, email, password);\n};\n\nexport const signOutUser = async () => await signOut(auth);\n"],"mappings":"AAAA,SAASA,aAAa,QAAQ,cAAc;AAC5C,SACEC,OAAO,EACPC,kBAAkB,EAClBC,eAAe,EACfC,kBAAkB,EAClBC,8BAA8B,EAC9BC,0BAA0B,EAC1BC,OAAO,QACF,eAAe;AACtB,SAASC,YAAY,EAAEC,GAAG,EAAEC,MAAM,EAAEC,MAAM,QAAQ,oBAAoB;AAEtE,MAAMC,cAAc,GAAG;EACrBC,MAAM,EAAE,yCAAyC;EACjDC,UAAU,EAAE,wCAAwC;EACpDC,SAAS,EAAE,wBAAwB;EACnCC,aAAa,EAAE,oCAAoC;EACnDC,iBAAiB,EAAE,cAAc;EACjCC,KAAK,EAAE,2CAA2C;EAClDC,aAAa,EAAE;AACjB,CAAC;;AAED;AACA,MAAMC,WAAW,GAAGpB,aAAa,CAACY,cAAc,CAAC;AAEjD,MAAMS,QAAQ,GAAG,IAAIjB,kBAAkB,EAAE;AACzCiB,QAAQ,CAACC,mBAAmB,CAAC;EAC3BC,MAAM,EAAE;AACV,CAAC,CAAC;AAEF,OAAO,MAAMC,IAAI,GAAGvB,OAAO,EAAE;AAC7B,OAAO,MAAMwB,qBAAqB,GAAG,MAAMtB,eAAe,CAACqB,IAAI,EAAEH,QAAQ,CAAC;AAC1E,OAAO,MAAMK,wBAAwB,GAAG,MACtCxB,kBAAkB,CAACsB,IAAI,EAAEH,QAAQ,CAAC;AAEpC,OAAO,MAAMM,EAAE,GAAGnB,YAAY,EAAE;AAEhC,OAAO,MAAMoB,0BAA0B,GAAG,gBACxCC,QAAQ,EAEL;EAAA,IADHC,cAAc,uEAAG;IAAEC,WAAW,EAAE;EAAQ,CAAC;EAEzC,IAAI,CAACF,QAAQ,EAAE;EACf;EACA,MAAMG,UAAU,GAAGvB,GAAG,CAACkB,EAAE,EAAE,OAAO,EAAEE,QAAQ,CAACI,GAAG,CAAC;EAEjDC,OAAO,CAACC,GAAG,CAACH,UAAU,CAAC;EAEvB,MAAMI,YAAY,GAAG,MAAM1B,MAAM,CAACsB,UAAU,CAAC;;EAE7C;EACA;EACA;EACA;EACA;EACA;EACA,IAAI,CAACI,YAAY,CAACC,MAAM,EAAE,EAAE;IAC1B,MAAM;MAAEN,WAAW;MAAEO;IAAM,CAAC,GAAGT,QAAQ;IACvC,MAAMU,SAAS,GAAG,IAAIC,IAAI,EAAE;IAE5B,IAAI;MACF,MAAM7B,MAAM,CAACqB,UAAU,EAAE;QACvBD,WAAW;QACXO,KAAK;QACLC,SAAS;QACT,GAAGT;MACL,CAAC,CAAC;IACJ,CAAC,CAAC,OAAOW,KAAK,EAAE;MACdP,OAAO,CAACC,GAAG,CAAC,0BAA0B,CAAC;IACzC;EACF;EAEA,OAAOH,UAAU;AACnB,CAAC;AAED,OAAO,MAAMU,kCAAkC,GAAG,OAAOJ,KAAK,EAAEK,QAAQ,KAAK;EAC3E,IAAI,CAACL,KAAK,IAAI,CAACK,QAAQ,EAAE;IACvB;EACF;EACA,OAAO,MAAMtC,8BAA8B,CAACmB,IAAI,EAAEc,KAAK,EAAEK,QAAQ,CAAC;AACpE,CAAC;AAED,OAAO,MAAMC,kCAAkC,GAAG,OAAON,KAAK,EAAEK,QAAQ,KAAK;EAC3E,IAAI,CAACL,KAAK,IAAI,CAACK,QAAQ,EAAE;EACzBrC,0BAA0B,CAACkB,IAAI,EAAEc,KAAK,EAAEK,QAAQ,CAAC;AACnD,CAAC;AAED,OAAO,MAAME,WAAW,GAAG,YAAY,MAAMtC,OAAO,CAACiB,IAAI,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}